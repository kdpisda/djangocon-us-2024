# Generated by Django 5.1.1 on 2024-09-22 08:01
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "Country",
                "verbose_name_plural": "Countries",
            },
        ),
        migrations.CreateModel(
            name="GPTLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "model",
                    models.CharField(help_text="Name of the model.", max_length=255),
                ),
                ("prompt", models.TextField(help_text="Prompt for the model.")),
                ("response", models.TextField(help_text="Response from the model.")),
            ],
            options={
                "verbose_name": "GPT Log",
                "verbose_name_plural": "GPT Logs",
            },
        ),
        migrations.CreateModel(
            name="MusixLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("endpoint", models.TextField(help_text="Endpoint of the request.")),
                ("params", models.JSONField(help_text="Parameters of the request.")),
                ("response", models.JSONField(help_text="Response of the request.")),
                (
                    "status_code",
                    models.IntegerField(help_text="Status code of the response."),
                ),
            ],
            options={
                "ordering": ["-created_at", "-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Song",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(help_text="Name of the song.", max_length=255),
                ),
                ("artist_id", models.IntegerField(help_text="ID of the artist.")),
                (
                    "artist_name",
                    models.CharField(help_text="Name of the artist.", max_length=255),
                ),
                (
                    "rating",
                    models.IntegerField(
                        help_text="Rating of the song.",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "explicit",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates whether the song is explicit.",
                    ),
                ),
                (
                    "has_lyrics",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates whether the song has lyrics.",
                    ),
                ),
                ("lyrics", models.TextField(help_text="Lyrics of the song.")),
                (
                    "has_subtitles",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates whether the song has subtitles.",
                    ),
                ),
                ("album_id", models.IntegerField(help_text="ID of the album.")),
                (
                    "album_name",
                    models.CharField(help_text="Name of the album.", max_length=255),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True, help_text="Summary of the song.", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("INITIALIZED", "Initialized"),
                            ("LYRICS_FETCHED", "Lyrics Fetched"),
                            ("SUMMARY_GENERATED", "Summary Generated"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="INITIALIZED",
                        help_text="Status of the song.",
                        max_length=255,
                    ),
                ),
                (
                    "countries",
                    models.ManyToManyField(
                        help_text="Countries found in the song.",
                        related_name="songs",
                        to="cms.country",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at", "-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Request",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "artist",
                    models.CharField(help_text="Name of the artist.", max_length=255),
                ),
                (
                    "track",
                    models.CharField(help_text="Name of the track.", max_length=255),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("INITIALIZED", "Initialized"),
                            ("PROCESSING", "Processing"),
                            ("SONG_FOUND", "Song Found"),
                            ("LYRICS_FOUND", "Lyrics Found"),
                            ("SUMMARY_GENERATED", "Summary Generated"),
                            ("COMPLETED", "Completed"),
                            ("NOT_FOUND", "Not Found"),
                            ("FAILED", "Failed"),
                        ],
                        default="INITIALIZED",
                        help_text="Status of the request.",
                        max_length=255,
                    ),
                ),
                (
                    "errors",
                    models.TextField(
                        blank=True,
                        help_text="Errors encountered during processing.",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Request made by the user.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "song",
                    models.ForeignKey(
                        help_text="Reference to the song.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="cms.song",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at", "-updated_at"],
                "abstract": False,
            },
        ),
    ]
